#+TITLE:Yigid's Basedmacs Config
#+AUTHOR: Ferit Yigid BALABAN (fyb)
#+DESCRIPTION: fyb's personal based gnu emacs configuration.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* elpaca package manager

#+begin_src emacs-lisp

  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						   ,@(when-let ((depth (plist-get order :depth)))
						       (list (format "--depth=%d" depth) "--no-single-branch"))
						   ,(plist-get order :repo) ,repo))))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
  
#+end_src

* packages

#+begin_src emacs-lisp

    (elpaca elpaca-use-package (elpaca-use-package-mode))
    (elpaca-wait)
    (use-package beacon
      :ensure t
      :demand t
      :config
      (beacon-mode 1))
 
#+end_src

* keybinds

#+begin_src emacs-lisp

  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)

#+end_src

* misc.

#+begin_src emacs-lisp

  ;; 1. sets the directory where backup files are kept
  ;; 2. sets the directory where auto-saved file are kept
  (setq backup-directory-alist '(("." . "~/vault/org/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/vault/org/backups/" t)))

  (global-visual-line-mode 1)
  (display-line-numbers-mode 1)

  (setq custom-theme-directory "~/vault/org/themes/")
  (add-hook 'org-mode-hook 'org-indent-mode)

  (set-face-background 'default nil)

#+end_src

* latex

#+begin_src emacs-lisp
  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))

  (add-to-list 'org-latex-classes '("article"
                                    "\\documentclass[12pt]{article}
                                         \\setlength{\\parskip}{\\baselineskip}%
                                         \\setlength{\\parindent}{0pt}%
                                         \\usepackage{booktabs} \\usepackage{graphicx}
                                         \\usepackage[a4paper,margin=2.5cm]{geometry}
                                         \\usepackage[hidelinks]{hyperref}
                                         \\usepackage{lmodern}
                                         \\usepackage{enumitem}
                                         \\setlistdepth{12}
                                         \\renewcommand{\\contentsname}{Icerik}"))
#+end_src
